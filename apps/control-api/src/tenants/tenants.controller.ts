import {
  Body,
  Controller,
  ForbiddenException,
  Get,
  HttpCode,
  HttpStatus,
  Param,
  Patch,
  Post,
  Request,
  UseGuards,
  UsePipes,
  ValidationPipe,
} from '@nestjs/common';
import {
  ApiBadRequestResponse,
  ApiBearerAuth,
  ApiConflictResponse,
  ApiCreatedResponse,
  ApiForbiddenResponse,
  ApiNotFoundResponse,
  ApiOkResponse,
  ApiOperation,
  ApiParam,
  ApiResponse,
  ApiTags,
  ApiUnauthorizedResponse,
} from '@nestjs/swagger';

// ‚úÖ Imports des d√©corateurs
import {
  Public,
  RequirePermissions,
  RequireRoles,
} from '../auth/decortors/permissions.decorator';
import {
  RateLimitModerate,
  RateLimitStrict,
  SkipRateLimit,
} from '../auth/decortors/rate.decorator';

// ‚úÖ Imports des guards
import { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';
import { PermissionsGuard } from '../auth/guards/permission.guard';
import { RateLimitGuard } from '../auth/guards/rate-limit.guard';

// ‚úÖ Imports des DTOs
import { CreateTenantDto } from './dto/create-tenant.dto';
import { TenantSignupDto } from './dto/tenant-signup.dto';
import { TenantsService } from './tenants.service';

@ApiTags('Tenants')
@Controller('tenants')
@UseGuards(RateLimitGuard, JwtAuthGuard, PermissionsGuard) // ‚úÖ Ordre important
@UsePipes(new ValidationPipe({ whitelist: true, forbidNonWhitelisted: true }))
export class TenantsController {
  constructor(private readonly tenantsService: TenantsService) {}

  // ================================
  // üåç ROUTES PUBLIQUES
  // ================================

  @Post('signup')
  @Public() // ‚úÖ Route publique
  @RateLimitStrict() // ‚úÖ Protection stricte: 3 tentatives/15min
  @HttpCode(HttpStatus.CREATED)
  @ApiOperation({
    summary: 'üöÄ Inscription SaaS compl√®te',
    description: `
      Cr√©e un nouveau tenant avec administrateur en une seule √©tape.
      
      **Ce qui se passe :**
      1. Validation des donn√©es (slug unique, email valide, CGU accept√©es)
      2. Cr√©ation du tenant en mode TRIAL (14 jours)
      3. Cr√©ation de l'utilisateur administrateur
      4. Provisioning de la base de donn√©es (asynchrone)
      5. Authentification automatique
      6. Email de bienvenue
      
      **Protections actives :**
      - Rate limiting: 3 tentatives par IP / 15 minutes
      - Validation anti-spam et s√©curit√©
      - Slugs r√©serv√©s bloqu√©s
      - Emails temporaires interdits
    `,
  })
  @ApiCreatedResponse({
    description: 'Tenant cr√©√© et utilisateur authentifi√© avec succ√®s',
    schema: {
      example: {
        tenant: {
          id: 'cm123abc456def789',
          slug: 'ma-startup',
          name: 'Ma Startup',
          status: 'TRIAL',
          trialEndsAt: '2024-09-10T15:27:41.000Z',
          url: 'https://ma-startup.helpdeskly.com',
        },
        admin: {
          id: 'user-456',
          name: 'John Doe',
          email: 'john@startup.com',
          role: 'OWNER',
        },
        tokens: {
          accessToken: 'eyJhbGciOiJIUzI1NiIs...',
          refreshToken: 'refresh_token_here',
          expiresIn: 900,
        },
        onboarding: {
          nextSteps: [
            'Personnaliser votre workspace',
            'Inviter votre √©quipe',
            'Configurer les cat√©gories de tickets',
          ],
        },
      },
    },
  })
  @ApiConflictResponse({
    description: 'Slug d√©j√† utilis√© ou email existant',
    schema: {
      example: {
        statusCode: 409,
        message: 'Tenant slug "ma-startup" is already taken',
        error: 'Conflict',
        suggestions: ['ma-startup-2', 'ma-startup-inc', 'startup-ma'],
      },
    },
  })
  @ApiBadRequestResponse({
    description: 'Donn√©es invalides ou CGU non accept√©es',
    schema: {
      example: {
        statusCode: 400,
        message: [
          'adminEmail must be a valid email',
          'tenantSlug can only contain lowercase letters, numbers, and hyphens',
          'acceptTerms must be true',
        ],
        error: 'Bad Request',
      },
    },
  })
  @ApiResponse({
    status: 429,
    description: 'Trop de tentatives - Rate limit d√©pass√©',
    schema: {
      example: {
        statusCode: 429,
        message: 'Too many requests. Please try again in 12 minutes.',
        error: 'Too Many Requests',
        retryAfter: 720,
      },
    },
  })
  async signup(@Body() signupDto: TenantSignupDto, @Request() req: any) {
    const metadata = {
      ip: req.ip || 'unknown',
      userAgent: req.get('user-agent') || 'unknown',
    };

    return this.tenantsService.signupTenant(signupDto, metadata);
  }

  // ================================
  // üîê ROUTES PROT√âG√âES - CR√âATION
  // ================================

  @Post()
  @RequirePermissions('tenants.create')
  @RateLimitModerate() // ‚úÖ Plus permissif pour utilisateurs auth
  @ApiBearerAuth('access-token')
  @HttpCode(HttpStatus.CREATED)
  @ApiOperation({
    summary: 'Cr√©er un tenant suppl√©mentaire',
    description: `
      Cr√©e un nouveau tenant pour un utilisateur d√©j√† authentifi√©.
      Utilis√© pour les cas o√π un utilisateur veut cr√©er un second workspace.
      
      **Permissions requises :** Utilisateur authentifi√©
    `,
  })
  @ApiCreatedResponse({ description: 'Tenant cr√©√© avec succ√®s' })
  @ApiConflictResponse({ description: 'Un tenant avec ce slug existe d√©j√†' })
  @ApiBadRequestResponse({ description: 'Slug invalide ou r√©serv√©' })
  @ApiUnauthorizedResponse({ description: 'Token invalide' })
  @ApiForbiddenResponse({ description: 'Permissions insuffisantes' })
  async create(@Body() createTenantDto: CreateTenantDto) {
    return this.tenantsService.createTenant(createTenantDto);
  }

  // ================================
  // üîê ROUTES PROT√âG√âES - LECTURE
  // ================================

  @Get()
  @RequireRoles('SUPER_ADMIN')
  @RateLimitModerate()
  @ApiBearerAuth('access-token')
  @ApiOperation({
    summary: 'Lister tous les tenants (Admin seulement)',
    description: `
      R√©cup√®re la liste de tous les tenants avec leurs informations compl√®tes.
      
      **Acc√®s limit√© :** Super administrateurs (@helpdeskly.com) uniquement
      **Utilisation :** Administration, monitoring, support client
    `,
  })
  @ApiOkResponse({
    description: 'Liste compl√®te des tenants',
    schema: {
      example: [
        {
          id: 'cm123abc456def789',
          name: 'Ma Entreprise',
          slug: 'ma-entreprise',
          status: 'ACTIVE',
          trialEndsAt: '2024-01-15T10:30:00.000Z',
          createdAt: '2023-12-01T10:30:00.000Z',
          updatedAt: '2023-12-01T10:30:00.000Z',
          memberships: [
            {
              id: 'membership-123',
              role: 'OWNER',
              isActive: true,
              user: {
                id: 'user-456',
                name: 'John Doe',
                email: 'john@example.com',
                avatar: null,
              },
            },
          ],
        },
      ],
    },
  })
  @ApiUnauthorizedResponse({ description: 'Token invalide' })
  @ApiForbiddenResponse({ description: 'Acc√®s super admin requis' })
  async findAll() {
    return this.tenantsService.findAll();
  }

  @Get('my-tenants')
  @RequirePermissions('tenants.read')
  @RateLimitModerate()
  @ApiBearerAuth('access-token')
  @ApiOperation({
    summary: 'Mes tenants',
    description: `
      R√©cup√®re uniquement les tenants auxquels l'utilisateur appartient.
      Inclut le r√¥le de l'utilisateur dans chaque tenant.
    `,
  })
  @ApiOkResponse({
    description: "Tenants de l'utilisateur",
    schema: {
      example: [
        {
          id: 'cm123abc456def789',
          name: 'Ma Entreprise',
          slug: 'ma-entreprise',
          status: 'ACTIVE',
          role: 'OWNER', // R√¥le de l'utilisateur dans ce tenant
          trialEndsAt: '2024-01-15T10:30:00.000Z',
          memberSince: '2023-12-01T10:30:00.000Z',
        },
      ],
    },
  })
  @ApiUnauthorizedResponse({ description: 'Token invalide' })
  @ApiForbiddenResponse({ description: 'Aucun tenant accessible' })
  async findMyTenants(@Request() req) {
    return this.tenantsService.findTenantsForUser(req.user.sub);
  }

  @Get(':id')
  @RequirePermissions('tenants.read')
  @RateLimitModerate()
  @ApiBearerAuth('access-token')
  @ApiOperation({
    summary: "D√©tails d'un tenant",
    description: `
      R√©cup√®re les d√©tails d'un tenant sp√©cifique.
      L'utilisateur doit √™tre membre du tenant ou super admin pour y acc√©der.
    `,
  })
  @ApiParam({
    name: 'id',
    description: 'ID unique du tenant',
    example: 'cm123abc456def789',
  })
  @ApiOkResponse({ description: 'D√©tails du tenant' })
  @ApiNotFoundResponse({ description: 'Tenant non trouv√©' })
  @ApiForbiddenResponse({ description: 'Acc√®s refus√© √† ce tenant' })
  @ApiUnauthorizedResponse({ description: 'Token invalide' })
  async findOne(@Param('id') id: string, @Request() req) {
    // V√©rifier l'acc√®s au tenant
    await this.checkTenantAccess(id, req.user);
    return this.tenantsService.findOne(id);
  }

  // ================================
  // üîê ROUTES SYST√àME/ADMIN
  // ================================

  @Get('slug/:slug')
  @RequireRoles('SUPER_ADMIN')
  @SkipRateLimit() // ‚úÖ Route syst√®me - pas de limite
  @ApiBearerAuth('access-token')
  @ApiOperation({
    summary: 'Rechercher un tenant par slug (Syst√®me)',
    description: `
      R√©cup√®re un tenant par son slug.
      
      **Usage syst√®me :** 
      - R√©solution de tenant pour l'app-api
      - V√©rification d'existence lors du routage
      - Int√©grations internes
      
      **Acc√®s :** Super administrateurs uniquement
    `,
  })
  @ApiParam({
    name: 'slug',
    description: 'Slug unique du tenant',
    example: 'ma-entreprise',
  })
  @ApiOkResponse({ description: 'Tenant trouv√©' })
  @ApiNotFoundResponse({ description: 'Tenant non trouv√©' })
  @ApiForbiddenResponse({ description: 'Acc√®s super admin requis' })
  @ApiUnauthorizedResponse({ description: 'Token invalide' })
  async findBySlug(@Param('slug') slug: string) {
    const tenant = await this.tenantsService.findBySlug(slug);
    if (!tenant) {
      throw new Error(`Tenant with slug '${slug}' not found`);
    }
    return tenant;
  }

  // ================================
  // üîê ROUTES PROT√âG√âES - GESTION
  // ================================

  @Patch(':id/status')
  @RequirePermissions('tenants.manage')
  @RateLimitModerate()
  @ApiBearerAuth('access-token')
  @ApiOperation({
    summary: "Changer le statut d'un tenant",
    description: `
      Met √† jour le statut d'un tenant (ACTIVE, INACTIVE, SUSPENDED).
      
      **Permissions :** Propri√©taire du tenant ou super admin
      **Cas d'usage :** Suspendre un compte, r√©activer apr√®s paiement
    `,
  })
  @ApiParam({
    name: 'id',
    description: 'ID du tenant',
    example: 'cm123abc456def789',
  })
  @ApiOkResponse({ description: 'Statut mis √† jour avec succ√®s' })
  @ApiNotFoundResponse({ description: 'Tenant non trouv√©' })
  @ApiForbiddenResponse({ description: 'Permissions insuffisantes' })
  @ApiUnauthorizedResponse({ description: 'Token invalide' })
  async updateStatus(
    @Param('id') id: string,
    @Body() body: { status: 'ACTIVE' | 'INACTIVE' | 'SUSPENDED' },
    @Request() req,
  ) {
    await this.checkTenantManageAccess(id, req.user);
    return this.tenantsService.updateStatus(id, body.status);
  }

  @Patch(':id/database')
  @RequireRoles('SUPER_ADMIN')
  @SkipRateLimit() // ‚úÖ Route syst√®me
  @ApiBearerAuth('access-token')
  @ApiOperation({
    summary: 'Mettre √† jour la connexion base de donn√©es (Syst√®me)',
    description: `
      Met √† jour les informations de connexion √† la base de donn√©es.
      
      **Usage syst√®me uniquement :**
      - Processus de provisioning
      - Migration de serveurs
      - Maintenance infrastructure
    `,
  })
  @ApiParam({
    name: 'id',
    description: 'ID du tenant',
    example: 'cm123abc456def789',
  })
  @ApiOkResponse({ description: 'Connexion base de donn√©es mise √† jour' })
  @ApiForbiddenResponse({ description: 'Acc√®s syst√®me requis' })
  @ApiUnauthorizedResponse({ description: 'Token invalide' })
  async updateDatabaseConnection(
    @Param('id') id: string,
    @Body() body: { dbUrl?: string; secretRef?: string },
  ) {
    return this.tenantsService.updateDatabaseConnection(
      id,
      body.dbUrl,
      body.secretRef,
    );
  }

  // ================================
  // üõ†Ô∏è M√âTHODES UTILITAIRES PRIV√âES
  // ================================

  /**
   * V√©rifie que l'utilisateur peut acc√©der √† un tenant
   */
  private async checkTenantAccess(tenantId: string, user: any): Promise<void> {
    // Super admin a acc√®s √† tout
    if (this.isSuperAdmin(user)) {
      return;
    }

    // V√©rifier que l'utilisateur est membre du tenant
    const isMember = user.memberships?.some(
      (membership: any) =>
        membership.tenantId === tenantId && membership.isActive,
    );

    if (!isMember) {
      throw new ForbiddenException('Access denied to this tenant');
    }
  }

  /**
   * V√©rifie que l'utilisateur peut g√©rer un tenant
   */
  private async checkTenantManageAccess(
    tenantId: string,
    user: any,
  ): Promise<void> {
    // Super admin a acc√®s √† tout
    if (this.isSuperAdmin(user)) {
      return;
    }

    // V√©rifier que l'utilisateur est propri√©taire ou admin du tenant
    const canManage = user.memberships?.some(
      (membership: any) =>
        membership.tenantId === tenantId &&
        membership.isActive &&
        ['OWNER', 'ADMIN'].includes(membership.role),
    );

    if (!canManage) {
      throw new ForbiddenException(
        'Insufficient permissions to manage this tenant',
      );
    }
  }

  /**
   * V√©rifie si un utilisateur est super admin
   */
  private isSuperAdmin(user: any): boolean {
    return (
      user.email?.includes('@helpdeskly.com') || user.isSuperAdmin === true
    );
  }
}
