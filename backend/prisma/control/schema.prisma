// ════════════════════════════════════════════════════════════════
// 📊 SCHEMA CONTROL DB AVEC FACTURATION
// ════════════════════════════════════════════════════════════════

generator client {
  provider = "prisma-client-js"
  output   = "../../node_modules/.prisma/control"
}

datasource db {
  provider = "postgresql"
  url      = env("CONTROL_DATABASE_URL")
}

// ════════════════════════════════════════════════════════════════
// 🏢 TENANTS (EXISTANT + FACTURATION)
// ════════════════════════════════════════════════════════════════

model Tenant {
  id   String  @id @default(cuid())
  name String? @default("")
  slug String  @unique

  // Infrastructure (existant)
  dbUrl         String?
  secretRef     String?
  region        String       @default("eu-west-1")
  status        TenantStatus @default(PROVISIONING)
  schemaVersion Int          @default(1)

  // 💳 FACTURATION - Nouveau
  stripeCustomerId String? @unique
  billingEmail     String?

  // Essai gratuit
  trialEndsAt DateTime?
  isTrialing  Boolean   @default(true)

  // Relations existantes
  memberships Membership[]

  // 💳 Relations facturation - Nouveau
  subscription Subscription?
  invoices     Invoice[]
  usageRecords UsageRecord[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tenants")
}

// ════════════════════════════════════════════════════════════════
// 👥 USERS (EXISTANT - INCHANGÉ)
// ════════════════════════════════════════════════════════════════

model User {
  id       String  @id @default(cuid())
  email    String  @unique
  name     String
  avatar   String?
  isActive Boolean @default(true)
  password String

  memberships Membership[]
  sessions    Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Membership {
  id       String     @id @default(cuid())
  userId   String
  tenantId String
  role     MemberRole @default(MEMBER)
  isActive Boolean    @default(true)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, tenantId])
  @@map("memberships")
  @@index([tenantId])
  @@index([userId, tenantId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  tenantId     String?
  accessToken  String   @unique
  refreshToken String?  @unique
  expiresAt    DateTime
  userAgent    String?
  ipAddress    String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

// ════════════════════════════════════════════════════════════════
// 💳 FACTURATION - NOUVEAU
// ════════════════════════════════════════════════════════════════

model Plan {
  id          String @id @default(cuid())
  name        String @unique // "starter", "professional", "enterprise"
  displayName String // "Starter", "Professional", "Enterprise"
  description String
  features    Json // Array des fonctionnalités

  // Pricing
  priceMonthly Decimal  @db.Decimal(10, 2)
  priceYearly  Decimal? @db.Decimal(10, 2)
  currency     String   @default("EUR")

  // Limites
  maxUsers    Int @default(5)
  maxTickets  Int @default(1000) // -1 = illimité
  maxStorage  Int @default(1000) // MB
  maxApiCalls Int @default(10000) // par mois

  // Stripe
  stripePriceIdMonthly String?
  stripePriceIdYearly  String?
  stripeProductId      String?

  // Status
  isActive  Boolean @default(true)
  isPopular Boolean @default(false)
  sortOrder Int     @default(0)

  // Relations
  subscriptions Subscription[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("plans")
}

model Subscription {
  id       String @id @default(cuid())
  tenantId String @unique // One subscription per tenant
  planId   String

  // Stripe
  stripeSubscriptionId String? @unique
  stripePriceId        String?

  // Status
  status       SubscriptionStatus @default(ACTIVE)
  billingCycle BillingCycle       @default(MONTHLY)

  // Dates
  startDate    DateTime  @default(now())
  endDate      DateTime?
  trialEndDate DateTime?
  canceledAt   DateTime?
  cancelReason String?

  // Pricing
  amount   Decimal @db.Decimal(10, 2)
  currency String  @default("EUR")

  // Relations
  tenant   Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  plan     Plan      @relation(fields: [planId], references: [id])
  invoices Invoice[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("subscriptions")
  @@index([planId])
}

model Invoice {
  id             String  @id @default(cuid())
  tenantId       String
  subscriptionId String?

  // Stripe
  stripeInvoiceId String? @unique

  // Invoice details
  invoiceNumber String  @unique
  amount        Decimal @db.Decimal(10, 2)
  tax           Decimal @default(0) @db.Decimal(10, 2)
  totalAmount   Decimal @db.Decimal(10, 2)
  currency      String  @default("EUR")

  // Status
  status InvoiceStatus @default(PENDING)

  // Dates
  issueDate DateTime  @default(now())
  dueDate   DateTime
  paidDate  DateTime?

  // Billing period
  periodStart DateTime
  periodEnd   DateTime

  // Relations
  tenant       Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  subscription Subscription? @relation(fields: [subscriptionId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("invoices")
  @@index([tenantId])
  @@index([subscriptionId])
}

/// Audit des webhooks Stripe pour déduplication et traçabilité
model WebhookEvent {
  id            String   @id @default(cuid())
  stripeEventId String   @unique
  eventType     String
  processed     Boolean  @default(true)
  processedAt   DateTime @default(now())
  eventData     Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("webhook_events")
}

// ════════════════════════════════════════════════════════════════
// 📊 USAGE TRACKING
// ════════════════════════════════════════════════════════════════

model UsageRecord {
  id       String @id @default(cuid())
  tenantId String

  // Metrics
  metricType    UsageMetricType
  value         Int
  previousValue Int             @default(0)

  // Time tracking
  recordedAt    DateTime @default(now())
  recordedMonth Int // Pour grouper par mois
  recordedYear  Int // Pour grouper par année

  // Metadata
  metadata Json?

  // Relations
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, metricType, recordedMonth, recordedYear])
  @@index([tenantId, recordedYear, recordedMonth])
  @@map("usage_records")
}

// ════════════════════════════════════════════════════════════════
// 📊 ENUMS
// ════════════════════════════════════════════════════════════════

enum TenantStatus {
  PROVISIONING
  ACTIVE
  INACTIVE
  SUSPENDED
  DELETED
}

enum MemberRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum SubscriptionStatus {
  TRIALING
  ACTIVE
  PAST_DUE
  CANCELED
  UNPAID
  INCOMPLETE
  INCOMPLETE_EXPIRED
}

enum BillingCycle {
  MONTHLY
  YEARLY
}

enum InvoiceStatus {
  PENDING
  PAID
  OVERDUE
  CANCELED
  REFUNDED
}

enum UsageMetricType {
  USERS
  TICKETS
  STORAGE
  API_CALLS
  COMMENTS
}
