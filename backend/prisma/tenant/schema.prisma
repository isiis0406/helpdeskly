// ════════════════════════════════════════════════════════════════
// 📊 SCHEMA TENANT DB AVEC USAGE EVENTS
// ════════════════════════════════════════════════════════════════

generator client {
  provider = "prisma-client-js"
  output   = "../../node_modules/.prisma/tenant"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ════════════════════════════════════════════════════════════════
// 🎫 DONNÉES MÉTIER (EXISTANT - INCHANGÉ)
// ════════════════════════════════════════════════════════════════

model Ticket {
  id          String         @id @default(cuid())
  // Numéro de ticket lisible (séquentiel par tenant)
  ticketNumber String        @unique
  title       String
  description String
  status      TicketStatus   @default(OPEN)
  priority    TicketPriority @default(MEDIUM)

  authorId     String // User ID de la DB control
  assignedToId String? // User ID de la DB control

  comments Comment[]

  // 📊 Usage tracking - Nouveau
  usageEvents UsageEvent[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tickets")
}

model Comment {
  id       String @id @default(cuid())
  body     String
  ticketId String
  authorId String // User ID de la DB control

  ticket Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  // 📊 Usage tracking - Nouveau
  usageEvents UsageEvent[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("comments")
}

// ════════════════════════════════════════════════════════════════
// 📊 USAGE EVENTS (NOUVEAU)
// ════════════════════════════════════════════════════════════════

model UsageEvent {
  id String @id @default(cuid())

  // Event details
  eventType  UsageEventType
  entityType EntityType
  entityId   String

  // Metrics
  incrementValue Int @default(1) // Combien on ajoute

  // User context
  userId String // User qui a déclenché l'action

  // Relations optionnelles
  ticketId  String?
  commentId String?

  ticket  Ticket?  @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  // Sync status
  syncedToControl Boolean   @default(false)
  syncedAt        DateTime?

  createdAt DateTime @default(now())

  @@map("usage_events")
}

// ════════════════════════════════════════════════════════════════
// 📊 ENUMS
// ════════════════════════════════════════════════════════════════

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum UsageEventType {
  CREATE
  UPDATE
  DELETE
  VIEW
  EXPORT
}

enum EntityType {
  TICKET
  COMMENT
  USER
  ATTACHMENT
  API_CALL
}
