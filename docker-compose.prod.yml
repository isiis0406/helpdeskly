version: "3.9"

services:
  # ════════════════════════════════════════════════════
  # 🗄️ INFRASTRUCTURE DATABASE
  # ════════════════════════════════════════════════════

  postgres:
    image: postgres:16-alpine
    container_name: helpdeskly-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: postgres
    env_file:
      - .env.production
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db-prod.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - helpdeskly-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Base pour migrations initiales (optionnelle en prod)
  postgres_migrations:
    image: postgres:16-alpine
    container_name: helpdeskly-postgres-migrations
    restart: "no"
    ports:
      - "5436:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: postgres
    networks:
      - helpdeskly-network

  # ────────────────────────────────────────────────────
  # 🔗 PGBOUNCER - Connection Pooling
  # ────────────────────────────────────────────────────

  pgbouncer:
    image: edoburu/pgbouncer:latest
    container_name: helpdeskly-pgbouncer
    restart: unless-stopped
    ports:
      - "6432:6432"
    environment:
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/postgres
      AUTH_USER: ${POSTGRES_USER}
      AUTH_PASSWORD: ${POSTGRES_PASSWORD}
      POOL_MODE: transaction
      MAX_CLIENT_CONN: 1000
      DEFAULT_POOL_SIZE: 25
    env_file:
      - .env.production
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - helpdeskly-network

  # ────────────────────────────────────────────────────
  # 🔴 REDIS - Cache & Sessions
  # ────────────────────────────────────────────────────

  redis:
    image: redis:7-alpine
    container_name: helpdeskly-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - helpdeskly-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

  # ════════════════════════════════════════════════════
  # 🎛️ APIS HELPDESKLY
  # ════════════════════════════════════════════════════

  # Control API - Gestion des tenants
  control-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: control-api
    container_name: helpdeskly-control-api
    restart: unless-stopped
    ports:
      - "6500:6500"
    environment:
      NODE_ENV: production
      PORT: 6500
      CONTROL_DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/helpdeskly_control
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN}
      JWT_ISSUER: ${JWT_ISSUER}
      JWT_AUDIENCE: ${JWT_AUDIENCE}
      REDIS_URL: redis://redis:6379
      BCRYPT_ROUNDS: ${BCRYPT_ROUNDS}
      LOG_LEVEL: ${LOG_LEVEL}
      ENABLE_SWAGGER: ${ENABLE_SWAGGER}
    env_file:
      - .env.production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - helpdeskly-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6500/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # App API - Gestion des tickets
  app-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: app-api
    container_name: helpdeskly-app-api
    restart: unless-stopped
    ports:
      - "6501:6501"
    environment:
      NODE_ENV: production
      PORT: 6501
      CONTROL_DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/helpdeskly_control
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/postgres
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN}
      JWT_ISSUER: ${JWT_ISSUER}
      JWT_AUDIENCE: ${JWT_AUDIENCE}
      REDIS_URL: redis://redis:6379
      DB_ENCRYPTION_KEY: ${DB_ENCRYPTION_KEY}
      LOG_LEVEL: ${LOG_LEVEL}
      ENABLE_SWAGGER: ${ENABLE_SWAGGER}
    env_file:
      - .env.production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      control-api:
        condition: service_healthy
    networks:
      - helpdeskly-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6501/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ════════════════════════════════════════════════════
  # 🛠️ OUTILS D'ADMINISTRATION
  # ════════════════════════════════════════════════════

  # PgAdmin - Interface d'administration BDD
  pgadmin:
    image: dpage/pgadmin4:8
    container_name: helpdeskly-pgadmin
    restart: unless-stopped
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@helpdeskly.local
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin_secure_password_2024}
      PGADMIN_LISTEN_PORT: 80
      PGADMIN_CONFIG_ENHANCED_COOKIE_PROTECTION: "True"
      PGADMIN_CONFIG_CONSOLE_LOG_LEVEL: 30
    env_file:
      - .env.production
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./pgadmin/servers.json:/pgadmin4/servers.json:ro
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - helpdeskly-network
    profiles:
      - tools # Utilise 'docker-compose --profile tools up' pour inclure

  # ────────────────────────────────────────────────────
  # 🌐 REVERSE PROXY NGINX
  # ────────────────────────────────────────────────────

  nginx:
    image: nginx:alpine
    container_name: helpdeskly-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      control-api:
        condition: service_healthy
      app-api:
        condition: service_healthy
    networks:
      - helpdeskly-network
    profiles:
      - proxy

# ════════════════════════════════════════════════════
# 💾 VOLUMES PERSISTANTS
# ════════════════════════════════════════════════════

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local

# ════════════════════════════════════════════════════
# 🌐 RÉSEAUX
# ════════════════════════════════════════════════════

networks:
  helpdeskly-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
